{"ast":null,"code":"var _jsxFileName = \"/home/venkat/Desktop/covid-vis/src/App.jsx\";\nimport React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Histogram from \"./Histogram\";\nimport DatePicker from \"./DatePicker\";\nimport { dateFilter, areaFilter, groupDataByKey, sortBy, getPaginatedData } from \"./Chart/utils\";\nimport \"./App.css\";\nimport CustomSelect from \"./Chart/CustomSelect\";\n\nfunction App() {\n  const defaultStartDate = moment(\"05/05/2020\");\n  const defaultEndDate = moment(\"05/18/2020\");\n  const [data, setData] = useState([]);\n  const [areaFilteredData, setAreaFilteredData] = useState([]);\n  const [dateWiseData, setDateWiseData] = useState([]);\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate);\n  const [selectedArea, setselectedArea] = useState([{\n    value: \"County Durham\",\n    label: \"County Durham\"\n  }]);\n  const [areas, setAreas] = useState([]);\n  const parseDate = d3.timeFormat(\"%d/%m/%Y\");\n\n  const dateAccessor = d => parseDate(d.specimenDate);\n\n  const casesAccessor = d => d.dailyLabConfirmedCases;\n\n  useEffect(() => {\n    const covidData = async () => {\n      const getData = await axios.get(\"/covid-08-06-2020.json\");\n      const areaType = \"areaType=ltla\";\n      const newSelected = selectedArea.map(d => [areaType, `areaName=${d.value}`]);\n      const structure = {\n        specimenDate: \"date\",\n        areaName: \"areaName\",\n        code: \"areaCode\",\n        dailyLabConfirmedCases: \"newCasesBySpecimenDate\"\n      };\n      const results = await getPaginatedData(newSelected, structure);\n      const aa = await groupDataByKey(\"specimenDate\", results);\n      const areaData = aa;\n      const groupDataByDate = groupDataByKey(\"specimenDate\", areaData);\n      const areaNames = [...new Map(areaData.map(name => [name.areaName, {\n        value: name.areaName,\n        label: name.areaName\n      }])).values()];\n      const sortedAreas = sortBy(\"value\", areaNames);\n      setAreas(sortedAreas);\n      setData(groupDataByDate);\n      const areaWiseFilteredData = areaFilter(selectedArea, groupDataByDate);\n      setAreaFilteredData(areaWiseFilteredData);\n      const applyDateFilter = dateFilter(startDate, endDate, areaWiseFilteredData);\n      setDateWiseData(applyDateFilter);\n    };\n\n    covidData();\n  }, []);\n  const selectStyles = {\n    control: () => ({\n      width: \"400px\",\n      display: \"flex\"\n    }),\n    menu: () => ({\n      width: \"400px\",\n      maxHeight: \"40px\"\n    })\n  };\n\n  const handleDatesChange = ({\n    startDate,\n    endDate\n  }) => {\n    const momentStart = moment(startDate);\n    const momentEnd = moment(endDate);\n    if (momentEnd.diff(momentStart, \"days\") > 30) return null;\n    if (momentEnd.diff(momentStart, \"days\") < 7) return null;\n    setStartDate(startDate);\n    setEndDate(endDate);\n    const dateFilteredData = dateFilter(startDate, endDate, areaFilteredData);\n    dateFilteredData && setDateWiseData(dateFilteredData);\n  };\n\n  const handleSelect = selectValue => {\n    if (!selectValue || selectValue.length === 0) {\n      setselectedArea(selectValue);\n      return;\n    }\n\n    if (selectValue.length > 2) {\n      alert(\"only 2 Areas max please\");\n      return null;\n    }\n\n    const areaType = \"areaType=ltla\";\n    const newSelected = selectValue.map(d => [areaType, d.value]);\n    console.log(newSelected);\n    const areaWiseFilteredData = areaFilter(selectValue, data);\n    const applyDateFilter = dateFilter(startDate, endDate, areaWiseFilteredData);\n    setAreaFilteredData(areaWiseFilteredData);\n    setDateWiseData(applyDateFilter);\n    setselectedArea(selectValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date__picker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    startDate: startDate,\n    endDate: endDate,\n    setStartDate: setStartDate,\n    setEndDate: setEndDate,\n    handleDatesChange: handleDatesChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(CustomSelect, {\n    options: areas,\n    styles: selectStyles,\n    defaultValue: {\n      value: \"County Durham\",\n      label: \"County Durham\"\n    },\n    onChangeHandler: handleSelect,\n    value: selectedArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Histogram, {\n    xAccessor: dateAccessor,\n    yAccessor: casesAccessor,\n    data: dateWiseData,\n    selectedValues: selectedArea,\n    label: \"Daily cases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/venkat/Desktop/covid-vis/src/App.jsx"],"names":["React","useState","useEffect","useLayoutEffect","d3","moment","axios","Histogram","DatePicker","dateFilter","areaFilter","groupDataByKey","sortBy","getPaginatedData","CustomSelect","App","defaultStartDate","defaultEndDate","data","setData","areaFilteredData","setAreaFilteredData","dateWiseData","setDateWiseData","startDate","setStartDate","endDate","setEndDate","selectedArea","setselectedArea","value","label","areas","setAreas","parseDate","timeFormat","dateAccessor","d","specimenDate","casesAccessor","dailyLabConfirmedCases","covidData","getData","get","areaType","newSelected","map","structure","areaName","code","results","aa","areaData","groupDataByDate","areaNames","Map","name","values","sortedAreas","areaWiseFilteredData","applyDateFilter","selectStyles","control","width","display","menu","maxHeight","handleDatesChange","momentStart","momentEnd","diff","dateFilteredData","handleSelect","selectValue","length","alert","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Histogram from \"./Histogram\";\nimport DatePicker from \"./DatePicker\";\nimport {\n  dateFilter,\n  areaFilter,\n  groupDataByKey,\n  sortBy,\n  getPaginatedData,\n} from \"./Chart/utils\";\nimport \"./App.css\";\nimport CustomSelect from \"./Chart/CustomSelect\";\n\nfunction App() {\n  const defaultStartDate = moment(\"05/05/2020\");\n  const defaultEndDate = moment(\"05/18/2020\");\n  const [data, setData] = useState([]);\n  const [areaFilteredData, setAreaFilteredData] = useState([]);\n  const [dateWiseData, setDateWiseData] = useState([]);\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate);\n  const [selectedArea, setselectedArea] = useState([\n    { value: \"County Durham\", label: \"County Durham\" },\n  ]);\n  const [areas, setAreas] = useState([]);\n\n  const parseDate = d3.timeFormat(\"%d/%m/%Y\");\n  const dateAccessor = (d) => parseDate(d.specimenDate);\n  const casesAccessor = (d) => d.dailyLabConfirmedCases;\n\n  useEffect(() => {\n    const covidData = async () => {\n      const getData = await axios.get(\"/covid-08-06-2020.json\");\n      const areaType = \"areaType=ltla\";\n      const newSelected = selectedArea.map((d) => [\n        areaType,\n        `areaName=${d.value}`,\n      ]);\n      const structure = {\n        specimenDate: \"date\",\n        areaName: \"areaName\",\n        code: \"areaCode\",\n        dailyLabConfirmedCases: \"newCasesBySpecimenDate\",\n      };\n      const results = await getPaginatedData(newSelected, structure);\n      const aa = await groupDataByKey(\"specimenDate\", results);\n      const areaData = aa;\n\n      const groupDataByDate = groupDataByKey(\"specimenDate\", areaData);\n      const areaNames = [\n        ...new Map(\n          areaData.map((name) => [\n            name.areaName,\n            { value: name.areaName, label: name.areaName },\n          ])\n        ).values(),\n      ];\n      const sortedAreas = sortBy(\"value\", areaNames);\n      setAreas(sortedAreas);\n      setData(groupDataByDate);\n      const areaWiseFilteredData = areaFilter(selectedArea, groupDataByDate);\n      setAreaFilteredData(areaWiseFilteredData);\n      const applyDateFilter = dateFilter(\n        startDate,\n        endDate,\n        areaWiseFilteredData\n      );\n      setDateWiseData(applyDateFilter);\n    };\n    covidData();\n  }, []);\n\n  const selectStyles = {\n    control: () => ({\n      width: \"400px\",\n      display: \"flex\",\n    }),\n    menu: () => ({\n      width: \"400px\",\n      maxHeight: \"40px\",\n    }),\n  };\n\n  const handleDatesChange = ({ startDate, endDate }) => {\n    const momentStart = moment(startDate);\n    const momentEnd = moment(endDate);\n    if (momentEnd.diff(momentStart, \"days\") > 30) return null;\n    if (momentEnd.diff(momentStart, \"days\") < 7) return null;\n    setStartDate(startDate);\n    setEndDate(endDate);\n    const dateFilteredData = dateFilter(startDate, endDate, areaFilteredData);\n    dateFilteredData && setDateWiseData(dateFilteredData);\n  };\n  const handleSelect = (selectValue) => {\n    if (!selectValue || selectValue.length === 0) {\n      setselectedArea(selectValue);\n      return;\n    }\n    if (selectValue.length > 2) {\n      alert(\"only 2 Areas max please\");\n      return null;\n    }\n    const areaType = \"areaType=ltla\";\n    const newSelected = selectValue.map((d) => [areaType, d.value]);\n    console.log(newSelected);\n    const areaWiseFilteredData = areaFilter(selectValue, data);\n    const applyDateFilter = dateFilter(\n      startDate,\n      endDate,\n      areaWiseFilteredData\n    );\n    setAreaFilteredData(areaWiseFilteredData);\n    setDateWiseData(applyDateFilter);\n    setselectedArea(selectValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"date__picker\">\n        <DatePicker\n          startDate={startDate}\n          endDate={endDate}\n          setStartDate={setStartDate}\n          setEndDate={setEndDate}\n          handleDatesChange={handleDatesChange}\n        />\n      </div>\n      <CustomSelect\n        options={areas}\n        styles={selectStyles}\n        defaultValue={{ value: \"County Durham\", label: \"County Durham\" }}\n        onChangeHandler={handleSelect}\n        value={selectedArea}\n      />\n      <Histogram\n        xAccessor={dateAccessor}\n        yAccessor={casesAccessor}\n        data={dateWiseData}\n        selectedValues={selectedArea}\n        label=\"Daily cases\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}