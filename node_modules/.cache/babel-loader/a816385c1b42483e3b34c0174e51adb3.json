{"ast":null,"code":"var _jsxFileName = \"/home/venkat/Desktop/covid-vis/src/App.jsx\";\nimport React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Histogram from \"./Histogram\";\nimport DatePicker from \"./DatePicker\";\nimport { dateFilter, areaFilter, groupDataByKey, sortBy } from \"./Chart/utils\";\nimport \"./App.css\";\nimport CustomSelect from \"./Chart/CustomSelect\";\n\nfunction App() {\n  const defaultStartDate = moment(\"05/05/2020\");\n  const defaultEndDate = moment(\"05/18/2020\");\n  const [data, setData] = useState([]);\n  const [areaFilteredData, setAreaFilteredData] = useState([]);\n  const [dateWiseData, setDateWiseData] = useState([]);\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate);\n  const [selectedArea, setselectedArea] = useState([{\n    value: \"County Durham\",\n    label: \"County Durham\"\n  }]);\n  const [areas, setAreas] = useState([]);\n  const parseDate = d3.timeFormat(\"%d/%m/%Y\");\n\n  const dateAccessor = d => parseDate(d.specimenDate);\n\n  const casesAccessor = d => d.dailyLabConfirmedCases;\n\n  useEffect(() => {\n    const covidData = async () => {\n      const getData = await axios.get(\"/covid-08-06-2020.json\");\n      const areaData = await getData.data.ltlas;\n      const groupDataByDate = groupDataByKey(\"specimenDate\", areaData);\n      const areaNames = [...new Map(areaData.map(name => [name.areaName, {\n        value: name.areaName,\n        label: name.areaName\n      }])).values()];\n      const sortedAreas = sortBy(\"value\", areaNames);\n      setAreas(sortedAreas);\n      setData(groupDataByDate);\n      const areaWiseFilteredData = areaFilter(selectedArea, groupDataByDate);\n      setAreaFilteredData(areaWiseFilteredData);\n      const applyDateFilter = dateFilter(startDate, endDate, areaWiseFilteredData);\n      setDateWiseData(applyDateFilter);\n    };\n\n    covidData();\n  }, []);\n  const selectStyles = {\n    control: () => ({\n      width: \"400px\",\n      display: \"flex\",\n      background: \"white\",\n      height: \"48px\",\n      borderRadius: \"2px\",\n      border: \"1px solid #dbdbdb\"\n    }),\n    menu: () => ({\n      width: \"400px\",\n      maxHeight: \"40px\",\n      background: \"white\"\n    }),\n    menuList: props => ({ ...props,\n      background: \"white\",\n      height: \"auto\"\n    })\n  };\n\n  const handleDatesChange = ({\n    startDate,\n    endDate\n  }) => {\n    const momentStart = moment(startDate);\n    const momentEnd = moment(endDate);\n    if (momentEnd.diff(momentStart, \"days\") > 30) return null;\n    if (momentEnd.diff(momentStart, \"days\") < 7) return null;\n    setStartDate(startDate);\n    setEndDate(endDate);\n    const dateFilteredData = dateFilter(startDate, endDate, areaFilteredData);\n    dateFilteredData && setDateWiseData(dateFilteredData);\n  };\n\n  const handleSelect = selectValue => {\n    if (!selectValue || selectValue.length === 0) {\n      setselectedArea(selectValue);\n      return;\n    }\n\n    if (selectValue.length > 2) {\n      alert(\"only 2 Areas max please\");\n      return null;\n    }\n\n    const areaWiseFilteredData = areaFilter(selectValue, data);\n    const applyDateFilter = dateFilter(startDate, endDate, areaWiseFilteredData);\n    setAreaFilteredData(areaWiseFilteredData);\n    setDateWiseData(applyDateFilter);\n    setselectedArea(selectValue);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Covid Histogram\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chart__controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date__picker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    startDate: startDate,\n    endDate: endDate,\n    setStartDate: setStartDate,\n    setEndDate: setEndDate,\n    handleDatesChange: handleDatesChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"area__select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CustomSelect, {\n    options: areas,\n    styles: selectStyles,\n    defaultValue: {\n      value: \"County Durham\",\n      label: \"County Durham\"\n    },\n    onChangeHandler: handleSelect,\n    value: selectedArea,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Histogram, {\n    xAccessor: dateAccessor,\n    yAccessor: casesAccessor,\n    data: dateWiseData,\n    selectedValues: selectedArea,\n    label: \"Daily cases\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/venkat/Desktop/covid-vis/src/App.jsx"],"names":["React","useState","useEffect","useLayoutEffect","d3","moment","axios","Histogram","DatePicker","dateFilter","areaFilter","groupDataByKey","sortBy","CustomSelect","App","defaultStartDate","defaultEndDate","data","setData","areaFilteredData","setAreaFilteredData","dateWiseData","setDateWiseData","startDate","setStartDate","endDate","setEndDate","selectedArea","setselectedArea","value","label","areas","setAreas","parseDate","timeFormat","dateAccessor","d","specimenDate","casesAccessor","dailyLabConfirmedCases","covidData","getData","get","areaData","ltlas","groupDataByDate","areaNames","Map","map","name","areaName","values","sortedAreas","areaWiseFilteredData","applyDateFilter","selectStyles","control","width","display","background","height","borderRadius","border","menu","maxHeight","menuList","props","handleDatesChange","momentStart","momentEnd","diff","dateFilteredData","handleSelect","selectValue","length","alert"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,eAArC,QAA4D,OAA5D;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,cAAjC,EAAiDC,MAAjD,QAA+D,eAA/D;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,MAAyB,sBAAzB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,gBAAgB,GAAGV,MAAM,CAAC,YAAD,CAA/B;AACA,QAAMW,cAAc,GAAGX,MAAM,CAAC,YAAD,CAA7B;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACkB,gBAAD,EAAmBC,mBAAnB,IAA0CnB,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAACc,gBAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAACe,cAAD,CAAtC;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,CAC/C;AAAE4B,IAAAA,KAAK,EAAE,eAAT;AAA0BC,IAAAA,KAAK,EAAE;AAAjC,GAD+C,CAAD,CAAhD;AAGA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAMgC,SAAS,GAAG7B,EAAE,CAAC8B,UAAH,CAAc,UAAd,CAAlB;;AACA,QAAMC,YAAY,GAAIC,CAAD,IAAOH,SAAS,CAACG,CAAC,CAACC,YAAH,CAArC;;AACA,QAAMC,aAAa,GAAIF,CAAD,IAAOA,CAAC,CAACG,sBAA/B;;AAEArC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsC,SAAS,GAAG,YAAY;AAC5B,YAAMC,OAAO,GAAG,MAAMnC,KAAK,CAACoC,GAAN,CAAU,wBAAV,CAAtB;AACA,YAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACxB,IAAR,CAAa2B,KAApC;AACA,YAAMC,eAAe,GAAGlC,cAAc,CAAC,cAAD,EAAiBgC,QAAjB,CAAtC;AACA,YAAMG,SAAS,GAAG,CAChB,GAAG,IAAIC,GAAJ,CACDJ,QAAQ,CAACK,GAAT,CAAcC,IAAD,IAAU,CACrBA,IAAI,CAACC,QADgB,EAErB;AAAErB,QAAAA,KAAK,EAAEoB,IAAI,CAACC,QAAd;AAAwBpB,QAAAA,KAAK,EAAEmB,IAAI,CAACC;AAApC,OAFqB,CAAvB,CADC,EAKDC,MALC,EADa,CAAlB;AAQA,YAAMC,WAAW,GAAGxC,MAAM,CAAC,OAAD,EAAUkC,SAAV,CAA1B;AACAd,MAAAA,QAAQ,CAACoB,WAAD,CAAR;AACAlC,MAAAA,OAAO,CAAC2B,eAAD,CAAP;AACA,YAAMQ,oBAAoB,GAAG3C,UAAU,CAACiB,YAAD,EAAekB,eAAf,CAAvC;AACAzB,MAAAA,mBAAmB,CAACiC,oBAAD,CAAnB;AACA,YAAMC,eAAe,GAAG7C,UAAU,CAChCc,SADgC,EAEhCE,OAFgC,EAGhC4B,oBAHgC,CAAlC;AAKA/B,MAAAA,eAAe,CAACgC,eAAD,CAAf;AACD,KAvBD;;AAwBAd,IAAAA,SAAS;AACV,GA1BQ,EA0BN,EA1BM,CAAT;AA4BA,QAAMe,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAE,OAAO;AACdC,MAAAA,KAAK,EAAE,OADO;AAEdC,MAAAA,OAAO,EAAE,MAFK;AAGdC,MAAAA,UAAU,EAAE,OAHE;AAIdC,MAAAA,MAAM,EAAE,MAJM;AAKdC,MAAAA,YAAY,EAAE,KALA;AAMdC,MAAAA,MAAM,EAAE;AANM,KAAP,CADU;AASnBC,IAAAA,IAAI,EAAE,OAAO;AACXN,MAAAA,KAAK,EAAE,OADI;AAEXO,MAAAA,SAAS,EAAE,MAFA;AAGXL,MAAAA,UAAU,EAAE;AAHD,KAAP,CATa;AAcnBM,IAAAA,QAAQ,EAAGC,KAAD,KAAY,EACpB,GAAGA,KADiB;AAEpBP,MAAAA,UAAU,EAAE,OAFQ;AAGpBC,MAAAA,MAAM,EAAE;AAHY,KAAZ;AAdS,GAArB;;AAqBA,QAAMO,iBAAiB,GAAG,CAAC;AAAE5C,IAAAA,SAAF;AAAaE,IAAAA;AAAb,GAAD,KAA4B;AACpD,UAAM2C,WAAW,GAAG/D,MAAM,CAACkB,SAAD,CAA1B;AACA,UAAM8C,SAAS,GAAGhE,MAAM,CAACoB,OAAD,CAAxB;AACA,QAAI4C,SAAS,CAACC,IAAV,CAAeF,WAAf,EAA4B,MAA5B,IAAsC,EAA1C,EAA8C,OAAO,IAAP;AAC9C,QAAIC,SAAS,CAACC,IAAV,CAAeF,WAAf,EAA4B,MAA5B,IAAsC,CAA1C,EAA6C,OAAO,IAAP;AAC7C5C,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAG,IAAAA,UAAU,CAACD,OAAD,CAAV;AACA,UAAM8C,gBAAgB,GAAG9D,UAAU,CAACc,SAAD,EAAYE,OAAZ,EAAqBN,gBAArB,CAAnC;AACAoD,IAAAA,gBAAgB,IAAIjD,eAAe,CAACiD,gBAAD,CAAnC;AACD,GATD;;AAUA,QAAMC,YAAY,GAAIC,WAAD,IAAiB;AACpC,QAAI,CAACA,WAAD,IAAgBA,WAAW,CAACC,MAAZ,KAAuB,CAA3C,EAA8C;AAC5C9C,MAAAA,eAAe,CAAC6C,WAAD,CAAf;AACA;AACD;;AACD,QAAIA,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACA,aAAO,IAAP;AACD;;AACD,UAAMtB,oBAAoB,GAAG3C,UAAU,CAAC+D,WAAD,EAAcxD,IAAd,CAAvC;AACA,UAAMqC,eAAe,GAAG7C,UAAU,CAChCc,SADgC,EAEhCE,OAFgC,EAGhC4B,oBAHgC,CAAlC;AAKAjC,IAAAA,mBAAmB,CAACiC,oBAAD,CAAnB;AACA/B,IAAAA,eAAe,CAACgC,eAAD,CAAf;AACA1B,IAAAA,eAAe,CAAC6C,WAAD,CAAf;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,SAAS,EAAElD,SADb;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,YAAY,EAAED,YAHhB;AAIE,IAAA,UAAU,EAAEE,UAJd;AAKE,IAAA,iBAAiB,EAAEyC,iBALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAUE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,OAAO,EAAEpC,KADX;AAEE,IAAA,MAAM,EAAEwB,YAFV;AAGE,IAAA,YAAY,EAAE;AAAE1B,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,KAAK,EAAE;AAAjC,KAHhB;AAIE,IAAA,eAAe,EAAE0C,YAJnB;AAKE,IAAA,KAAK,EAAE7C,YALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CAFF,eAuBE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEQ,YADb;AAEE,IAAA,SAAS,EAAEG,aAFb;AAGE,IAAA,IAAI,EAAEjB,YAHR;AAIE,IAAA,cAAc,EAAEM,YAJlB;AAKE,IAAA,KAAK,EAAC,aALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,CADF;AAiCD;;AAED,eAAeb,GAAf","sourcesContent":["import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport Histogram from \"./Histogram\";\nimport DatePicker from \"./DatePicker\";\nimport { dateFilter, areaFilter, groupDataByKey, sortBy } from \"./Chart/utils\";\nimport \"./App.css\";\nimport CustomSelect from \"./Chart/CustomSelect\";\n\nfunction App() {\n  const defaultStartDate = moment(\"05/05/2020\");\n  const defaultEndDate = moment(\"05/18/2020\");\n  const [data, setData] = useState([]);\n  const [areaFilteredData, setAreaFilteredData] = useState([]);\n  const [dateWiseData, setDateWiseData] = useState([]);\n  const [startDate, setStartDate] = useState(defaultStartDate);\n  const [endDate, setEndDate] = useState(defaultEndDate);\n  const [selectedArea, setselectedArea] = useState([\n    { value: \"County Durham\", label: \"County Durham\" },\n  ]);\n  const [areas, setAreas] = useState([]);\n\n  const parseDate = d3.timeFormat(\"%d/%m/%Y\");\n  const dateAccessor = (d) => parseDate(d.specimenDate);\n  const casesAccessor = (d) => d.dailyLabConfirmedCases;\n\n  useEffect(() => {\n    const covidData = async () => {\n      const getData = await axios.get(\"/covid-08-06-2020.json\");\n      const areaData = await getData.data.ltlas;\n      const groupDataByDate = groupDataByKey(\"specimenDate\", areaData);\n      const areaNames = [\n        ...new Map(\n          areaData.map((name) => [\n            name.areaName,\n            { value: name.areaName, label: name.areaName },\n          ])\n        ).values(),\n      ];\n      const sortedAreas = sortBy(\"value\", areaNames);\n      setAreas(sortedAreas);\n      setData(groupDataByDate);\n      const areaWiseFilteredData = areaFilter(selectedArea, groupDataByDate);\n      setAreaFilteredData(areaWiseFilteredData);\n      const applyDateFilter = dateFilter(\n        startDate,\n        endDate,\n        areaWiseFilteredData\n      );\n      setDateWiseData(applyDateFilter);\n    };\n    covidData();\n  }, []);\n\n  const selectStyles = {\n    control: () => ({\n      width: \"400px\",\n      display: \"flex\",\n      background: \"white\",\n      height: \"48px\",\n      borderRadius: \"2px\",\n      border: \"1px solid #dbdbdb\",\n    }),\n    menu: () => ({\n      width: \"400px\",\n      maxHeight: \"40px\",\n      background: \"white\",\n    }),\n    menuList: (props) => ({\n      ...props,\n      background: \"white\",\n      height: \"auto\",\n    }),\n  };\n\n  const handleDatesChange = ({ startDate, endDate }) => {\n    const momentStart = moment(startDate);\n    const momentEnd = moment(endDate);\n    if (momentEnd.diff(momentStart, \"days\") > 30) return null;\n    if (momentEnd.diff(momentStart, \"days\") < 7) return null;\n    setStartDate(startDate);\n    setEndDate(endDate);\n    const dateFilteredData = dateFilter(startDate, endDate, areaFilteredData);\n    dateFilteredData && setDateWiseData(dateFilteredData);\n  };\n  const handleSelect = (selectValue) => {\n    if (!selectValue || selectValue.length === 0) {\n      setselectedArea(selectValue);\n      return;\n    }\n    if (selectValue.length > 2) {\n      alert(\"only 2 Areas max please\");\n      return null;\n    }\n    const areaWiseFilteredData = areaFilter(selectValue, data);\n    const applyDateFilter = dateFilter(\n      startDate,\n      endDate,\n      areaWiseFilteredData\n    );\n    setAreaFilteredData(areaWiseFilteredData);\n    setDateWiseData(applyDateFilter);\n    setselectedArea(selectValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Covid Histogram</h1>\n      <div className=\"chart__controls\">\n        <div className=\"date__picker\">\n          <DatePicker\n            startDate={startDate}\n            endDate={endDate}\n            setStartDate={setStartDate}\n            setEndDate={setEndDate}\n            handleDatesChange={handleDatesChange}\n          />\n        </div>\n        <div className=\"area__select\">\n          <CustomSelect\n            options={areas}\n            styles={selectStyles}\n            defaultValue={{ value: \"County Durham\", label: \"County Durham\" }}\n            onChangeHandler={handleSelect}\n            value={selectedArea}\n          />\n        </div>\n      </div>\n\n      <Histogram\n        xAccessor={dateAccessor}\n        yAccessor={casesAccessor}\n        data={dateWiseData}\n        selectedValues={selectedArea}\n        label=\"Daily cases\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}