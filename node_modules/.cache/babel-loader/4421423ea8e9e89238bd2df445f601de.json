{"ast":null,"code":"var _jsxFileName = \"/home/venkat/Desktop/covid-vis/src/Histogram.jsx\";\nimport React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3 from \"d3\";\nimport Chart from \"./Chart/Chart\";\nimport Bars from \"./Chart/Bars\";\nimport Axis from \"./Chart/Axis\";\nimport Legends from \"./Chart/Legends\";\nimport { accessorPropsType, useCurrentWitdh } from \"./Chart/utils\";\nconst fillColors = [\"#FC766AFF\", \"#5B84B1FF\"];\n\nconst Histogram = ({\n  data,\n  xAccessor,\n  yAccessor,\n  label,\n  selectedValues\n}) => useMemo(() => {\n  const height = 600;\n  const width = 800;\n  const marginTop = 100;\n  const marginBottom = 100;\n  const marginLeft = 100;\n  const marginRight = 100;\n  const windowWidth = useCurrentWitdh();\n  let dimensions = {\n    height,\n    width,\n    marginTop,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    boundedHeight: Math.max(height - marginTop - marginBottom, 0),\n    boundedWidth: Math.max(width - marginLeft - marginRight, 0)\n  };\n  const nullRemovedData = data.filter(area => {\n    if (area.values.length > 0) {\n      return area.key;\n    }\n  });\n  const selectedAreas = selectedValues.map(d => d.value);\n  const dateRange = d3.extent(nullRemovedData.map(area => new Date(area.key)));\n  const allDates = data.map(area => new Date(area.key));\n  const values = data.map(d => d.values).flat();\n  const valuesRange = [0, d3.max(values.map(d => d.dailyLabConfirmedCases))];\n  const xScale = d3.scaleTime().domain(dateRange).rangeRound([0, dimensions.boundedWidth]);\n  const yScale = d3.scaleLinear().domain(valuesRange).range([dimensions.boundedHeight, 0]).nice();\n  const xBand = d3.scaleBand().domain(allDates).rangeRound([0, dimensions.boundedWidth]).padding(0.4);\n  const xBand1 = d3.scaleBand().domain(selectedAreas).rangeRound([0, xBand.bandwidth()]);\n  const color = d3.scaleOrdinal().domain(selectedAreas).range(fillColors);\n\n  const xAccessorScaled = d => xBand1(d.areaName);\n\n  const xAccessorGroupScaled = d => xScale(new Date(d.key));\n\n  const yAccessorScaled = d => yScale(d.dailyLabConfirmedCases);\n\n  const widthAccessorScaled = () => xBand1.bandwidth();\n\n  const heightAccessorScaled = d => dimensions.boundedHeight - yScale(d.dailyLabConfirmedCases);\n\n  const keyAccessor = (d, i) => i;\n\n  const colorAccessorScaled = d => color(d.areaName);\n\n  const colorScale = d => color(d);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Histogram\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    dimensions: dimensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Legends, {\n    data: selectedValues,\n    dimensions: dimensions,\n    scale: colorScale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Axis, {\n    dimensions: dimensions,\n    dimension: \"x\",\n    scale: xScale,\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Axis, {\n    dimensions: dimensions,\n    dimension: \"y\",\n    scale: yScale,\n    label: \"Count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Bars, {\n    data: data,\n    keyAccessor: keyAccessor,\n    xAccessorGroup: xAccessorGroupScaled,\n    xAccessor: xAccessorScaled,\n    yAccessor: yAccessorScaled,\n    widthAccessor: widthAccessorScaled,\n    heightAccessor: heightAccessorScaled,\n    fill: colorAccessorScaled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  })));\n}, [label, data]);\n\nHistogram.propTypes = {\n  xAccessor: accessorPropsType,\n  yAccessor: accessorPropsType,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string\n};\nHistogram.defaultProps = {\n  xAccessor: d => d.x,\n  yAccessor: d => d.y\n};\nexport default Histogram;","map":{"version":3,"sources":["/home/venkat/Desktop/covid-vis/src/Histogram.jsx"],"names":["React","useMemo","PropTypes","d3","Chart","Bars","Axis","Legends","accessorPropsType","useCurrentWitdh","fillColors","Histogram","data","xAccessor","yAccessor","label","selectedValues","height","width","marginTop","marginBottom","marginLeft","marginRight","windowWidth","dimensions","boundedHeight","Math","max","boundedWidth","nullRemovedData","filter","area","values","length","key","selectedAreas","map","d","value","dateRange","extent","Date","allDates","flat","valuesRange","dailyLabConfirmedCases","xScale","scaleTime","domain","rangeRound","yScale","scaleLinear","range","nice","xBand","scaleBand","padding","xBand1","bandwidth","color","scaleOrdinal","xAccessorScaled","areaName","xAccessorGroupScaled","yAccessorScaled","widthAccessorScaled","heightAccessorScaled","keyAccessor","i","colorAccessorScaled","colorScale","propTypes","xLabel","string","yLabel","defaultProps","x","y"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3 from \"d3\";\n\nimport Chart from \"./Chart/Chart\";\nimport Bars from \"./Chart/Bars\";\nimport Axis from \"./Chart/Axis\";\nimport Legends from \"./Chart/Legends\";\nimport { accessorPropsType, useCurrentWitdh } from \"./Chart/utils\";\n\nconst fillColors = [\"#FC766AFF\", \"#5B84B1FF\"];\nconst Histogram = ({ data, xAccessor, yAccessor, label, selectedValues }) =>\n  useMemo(() => {\n    const height = 600;\n    const width = 800;\n    const marginTop = 100;\n    const marginBottom = 100;\n    const marginLeft = 100;\n    const marginRight = 100;\n\n    const windowWidth = useCurrentWitdh();\n\n    let dimensions = {\n      height,\n      width,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      boundedHeight: Math.max(height - marginTop - marginBottom, 0),\n      boundedWidth: Math.max(width - marginLeft - marginRight, 0),\n    };\n    const nullRemovedData = data.filter((area) => {\n      if (area.values.length > 0) {\n        return area.key;\n      }\n    });\n    const selectedAreas = selectedValues.map((d) => d.value);\n    const dateRange = d3.extent(\n      nullRemovedData.map((area) => new Date(area.key))\n    );\n    const allDates = data.map((area) => new Date(area.key));\n    const values = data.map((d) => d.values).flat();\n    const valuesRange = [\n      0,\n      d3.max(values.map((d) => d.dailyLabConfirmedCases)),\n    ];\n\n    const xScale = d3\n      .scaleTime()\n      .domain(dateRange)\n      .rangeRound([0, dimensions.boundedWidth]);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain(valuesRange)\n      .range([dimensions.boundedHeight, 0])\n      .nice();\n\n    const xBand = d3\n      .scaleBand()\n      .domain(allDates)\n      .rangeRound([0, dimensions.boundedWidth])\n      .padding(0.4);\n\n    const xBand1 = d3\n      .scaleBand()\n      .domain(selectedAreas)\n      .rangeRound([0, xBand.bandwidth()]);\n\n    const color = d3.scaleOrdinal().domain(selectedAreas).range(fillColors);\n\n    const xAccessorScaled = (d) => xBand1(d.areaName);\n    const xAccessorGroupScaled = (d) => xScale(new Date(d.key));\n    const yAccessorScaled = (d) => yScale(d.dailyLabConfirmedCases);\n    const widthAccessorScaled = () => xBand1.bandwidth();\n    const heightAccessorScaled = (d) =>\n      dimensions.boundedHeight - yScale(d.dailyLabConfirmedCases);\n    const keyAccessor = (d, i) => i;\n    const colorAccessorScaled = (d) => color(d.areaName);\n    const colorScale = (d) => color(d);\n\n    return (\n      <div className=\"Histogram\">\n        <Chart dimensions={dimensions}>\n          <Legends\n            data={selectedValues}\n            dimensions={dimensions}\n            scale={colorScale}\n          />\n          <Axis\n            dimensions={dimensions}\n            dimension=\"x\"\n            scale={xScale}\n            label={label}\n          />\n          <Axis\n            dimensions={dimensions}\n            dimension=\"y\"\n            scale={yScale}\n            label=\"Count\"\n          />\n          <Bars\n            data={data}\n            keyAccessor={keyAccessor}\n            xAccessorGroup={xAccessorGroupScaled}\n            xAccessor={xAccessorScaled}\n            yAccessor={yAccessorScaled}\n            widthAccessor={widthAccessorScaled}\n            heightAccessor={heightAccessorScaled}\n            fill={colorAccessorScaled}\n          />\n        </Chart>\n      </div>\n    );\n  }, [label, data]);\n\nHistogram.propTypes = {\n  xAccessor: accessorPropsType,\n  yAccessor: accessorPropsType,\n  xLabel: PropTypes.string,\n  yLabel: PropTypes.string,\n};\n\nHistogram.defaultProps = {\n  xAccessor: (d) => d.x,\n  yAccessor: (d) => d.y,\n};\n\nexport default Histogram;\n"]},"metadata":{},"sourceType":"module"}